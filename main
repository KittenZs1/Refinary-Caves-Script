local DiscordLib =
    loadstring(game:HttpGet "https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/discord")()

local win = DiscordLib:Window("Refinary Caves")

local serv = win:Server("Refinary Caves", "")
local main = serv:Channel("Main")
local LocalChannel = serv:Channel("Local Player")
local misc = serv:Channel("Misc")
local teleports = serv:Channel("Teleports")
task.spawn(function()
    while true do
        wait(0)
        pcall(function()
            game.Players.LocalPlayer.Character["OwoChan Character"]:Destroy()
        end)
    end
end)
-- Local Player
    LocalChannel:Slider("Speed",16,250,0,
        function(t)
                         game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = t
        end
    )
    LocalChannel:Slider("Jump",50,250,0,
        function(t)
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = t
        end
    )

-- Teleports
local function tpBTN(x,y,z, name)
    teleports:Button(
        name,
        function()               
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(x,y,z)
        end
    )    
end
tpBTN(-913,3,-671,"Spawn")
teleports:Button(
    "Plot",
    function()
        for i, v in next, game:GetService("Workspace").Plots:GetChildren() do
            if v.Owner.Value == game.Players.LocalPlayer then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Base.CFrame + Vector3.new(0, 25, 0)
            end
        end
    end
)
tpBTN(-1005,3,-613,"UCS")
tpBTN(-1007,4.74,-728,"Land Agency")
tpBTN(-1028,4,-589.5,"Delivery Man")
tpBTN(-822.2,60,-609,"Green Block")
tpBTN(-1574,-6.4,-518.75,"Dock")
tpBTN(-1333,-3.3,-437,"Shore")
tpBTN(-1412,-14,-285.2,"Rusty Boat")
tpBTN(-1225, 78.7, -103, "Bloxy Cola")
tpBTN(-466,5.75,13,"Wood Store")
tpBTN(-460,3.85,-95.5,"Sell Area")
tpBTN(-1018.8,4.25,690.5,"Furniture Store")
tpBTN(709.9,8.25,-966.97,"Dealership")
tpBTN(734, 2.25, 55,"Pickaxe Store")
tpBTN(-108.75,240,1128.46,"Logic Store")
tpBTN(-496, 4.25, -655,"Secret Stash")
tpBTN(130, 88, 1073, "Trusty Pickaxe Area")
tpBTN(-795, -4.25, 2750, "Facility")
tpBTN(-763, -55, 2529, "RadiRug")
tpBTN(-3475, 17.9, 1040,"Meteor Rug")
tpBTN(-2153, -12.9, -1622,"Island")
tpBTN(-596, 194, 1058, "Cable Railway")
tpBTN(480, 300, 708, "Meteor Bowl")
tpBTN(612, 986, 1519, "Mountain Chair")

  local teleportOre = serv:Channel("Teleports: Ore")
    local function teleportToOreBTN(rockType) 
        teleportOre:Button(
            rockType,
            function()
                for i, v in next, game:GetDescendants() do
                    if v.Name == "RockString" and v:IsA("StringValue") and v.Value == rockType then
                        for i2, v2 in next, v.Parent:GetDescendants() do
                            if v2.Name == "Hitbox" then
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v2.CFrame + Vector3.new(0, 5, 0)
                                return
                            end
                        end
                    end
                end
                DiscordLib:Notification("Notification", "Could not find ore", "Okay!")
            end
        )
    end
    -- WIP
    local tpe = serv:Channel("Teleports: Entities")
    local studs, savedPos, tpSpeed, tries = 10, nil, 1, 1
    tpe:Button("Set Position", function()
        if getgenv().glow then
            getgenv().glow:Destroy()
        end
        -- creates a glowing object that shows the saved position        
        savedPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        getgenv().glow = Instance.new("Part")
        getgenv().glow.Anchored = true
        getgenv().glow.CanCollide = false
        getgenv().glow.Size = Vector3.new(1,1,1)
        getgenv().glow.Transparency = 0.5
        getgenv().glow.Color = Color3.fromRGB(255, 0, 0)
        getgenv().glow.Material = Enum.Material.Neon
        getgenv().glow.Name = "Glow"
        getgenv().glow.Parent = game.Workspace
        getgenv().glow.CFrame = savedPos
        DiscordLib:Notification("Notification", "Position Set!", "Okay!")
    end)    
    tpe:Slider("Speed", 1,100,1,
        function(value)
            tpSpeed = value
        end
    )
    tpe:Slider("Tries", 1,100,1,
        function(value)
            tries = value
        end
    )
    tpe:Slider("Studs",10,100,0,
        function(t)
            studs = t
        end
    )
    local entities = {}
    local d = game.Players.LocalPlayer.Character.HumanoidRootPart
    local r = 0
    task.spawn(function()
        while localuuid==getgenv().uuid do
            task.wait(0)
            if #entities > 0 then
                local v = entities[1]                
                if v:FindFirstChild("Owner") and v:FindFirstChild("Part") then -- checks if its valid obj
                    --if v.Part.Position.X < d.Position.X + studs/2 and v.Part.Position.X > d.Position.X - studs/2 and v.Part.Position.Z < d.Position.Z + studs/2 and v.Part.Position.Z > d.Position.Z - studs/2 then
                    if r <= tries then
                        r = r + 1
                        -- teleports to the object
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Part.CFrame
                        game:GetService("ReplicatedStorage").Events.Grab:InvokeServer(v.Part,{})
                        task.wait(tpSpeed/100)
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = savedPos
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Part.CFrame
                        v:FindFirstChild("Part").CFrame = savedPos
                    else
                        r = 0
                        table.remove(entities, 1)
                    end
                end
            end
        end
    end)
    tpe:Button("Teleport", function()
        if savedPos then
            -- get all entities in studs/2 radius
            local count = 0
            d = game.Players.LocalPlayer.Character.HumanoidRootPart
            for i, v in pairs(game:GetService("Workspace").Grabable:GetChildren()) do
                if v:FindFirstChild("Owner") and v:FindFirstChild("Part") then -- checks if its valid obj
                    if v.Part.Position.X < d.Position.X + studs/2 and v.Part.Position.X > d.Position.X - studs/2 and v.Part.Position.Z < d.Position.Z + studs/2 and v.Part.Position.Z > d.Position.Z - studs/2 then
                        entities[#entities+1] = v
                    end
                end
            end
            -- teleports to the entity and tries to teleport it until its successful then removes from table

            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Part.CFrame
            task.wait(0.3)
            v.Part.CFrame = savedPos

            count = count + 1
            DiscordLib:Notification("Notification", "Teleported "..count.." Entities!", "Okay!")
        else
            DiscordLib:Notification("Notification", "No Position Set!", "Okay!")
        end
    end)

    -- get all ores
    local array = {
        "Rock",
        "Stone",
        "Sandstone",
        "Limestone",
        "Granite",
        "Marble",
        "Copper",
        "Silver",
        "Iron",
        "Gold",
        "Emerald",
        "Ruby",
        "Amethyst",
        "Sapphire",
        "Oddstone",
        "Sunstone",
        "Crystal",
        "Cloudnite",
        "Obsidian",
        "Volcanium",
        "Moonstone",
        "Tolmedit",
        "Dumortierite",
        "Dirt",
        "Astatine",
        "Mythril",
        "Soulstone",
        "Pumpkin",
        "Candy Corn",
        "Cursed Pumpkin"
    }
    teleportOre:Button(
        "Teleport Ores to Plot",
        function()
            local pos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            for _, v in next, game:GetService("Workspace").Grabable:GetChildren() do
                if v:FindFirstChild("Owner") and v:FindFirstChild("Configuration") and v.Configuration:FindFirstChild("Data") 
                and v.Configuration.Data:FindFirstChild("MatInd") and v.Configuration.Data:FindFirstChild("Size") then
                    if v.Owner.Value == game.Players.LocalPlayer then
                        -- finds the plot
                        for _, l in next, game:GetService("Workspace").Plots:GetChildren() do
                            if l.Owner.Value == game.Players.LocalPlayer then
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Part.CFrame
                                task.wait(timeout)
                                v.Part.CFrame = l.Base.CFrame + Vector3.new(0, 25, 0)
                            end
                        end
                    end
                end
            end
            task.wait(timeout)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(pos.X, pos.Y, pos.Z)
        end
    )
    teleportOre:Button(
        "Teleport Ores to Current Pos",
        function()
            local pos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            for _, v in next, game:GetService("Workspace").Grabable:GetChildren() do
                if v:FindFirstChild("Owner") and v:FindFirstChild("Configuration") and v.Configuration:FindFirstChild("Data") 
                and v.Configuration.Data:FindFirstChild("MatInd") and v.Configuration.Data:FindFirstChild("Size") then
                    if v.Owner.Value == game.Players.LocalPlayer then
                        for _, l in next, game:GetService("Workspace").Plots:GetChildren() do
                            if l.Owner.Value == game.Players.LocalPlayer then
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Part.CFrame
                                v.Part.CFrame = CFrame.new(pos.X, pos.Y, pos.Z)
                                task.wait(timeout)
                            end
                        end
                    end
                end
            end
            task.wait(timeout)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(pos.X, pos.Y+3, pos.Z)
        end
    )
    teleportOre:Button(
        "Teleport Ores to Sell",
        function()
            for _, v in next, game:GetService("Workspace").Grabable:GetChildren() do
                if v:FindFirstChild("Owner") and v:FindFirstChild("Configuration") and v.Configuration:FindFirstChild("Data") 
                and v.Configuration.Data:FindFirstChild("MatInd") and v.Configuration.Data:FindFirstChild("Size") then
                    if v.Owner.Value == game.Players.LocalPlayer then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Part.CFrame
                        task.wait(timeout)
                        -- places the ore in the sell area
                        -- v.Part.CFrame = CFrame.new(-420, 12, -75)
                        -- places it somewhere randomly inside from -404, 8,-85 to -439, 8,-67
                        v.Part.CFrame = CFrame.new(math.random(404, 436)*-1, 8, math.random(67,85)*-1)
                    end
                end
            end
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-455,5.75,-57.7)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Map.Sellary.Keeper.IPart.CFrame
            task.wait(1)
            workspace.Map.Sellary.Keeper.IPart.Interact:FireServer()
            task.wait(1)
            for i, v in pairs(
                getconnections(
                    game:GetService("Players").LocalPlayer.PlayerGui.UserGui.Dialog:WaitForChild("Yes").MouseButton1Click
                )
            ) do
                v:Fire()
            end
        end
    )
    local time = 0.05
    teleportOre:Slider(
        "Teleport Ores Speed",
        0,
        500,
        5,
        function(value)
            time = value/100
        end
    )
      teleportOre:Seperator()
    for i,v in next, array do
        teleportToOreBTN(v)
    end
    -- checks if a player presses the F key
    local function checkF()
        local plr = game.Players.LocalPlayer
        local mouse = plr:GetMouse()
        mouse.KeyDown:Connect(
            function(key)
                if key == "f" then
                    for r, i in next, game:GetService("Workspace").Grabable:GetDescendants() do
                        if i.Name == "Grab" then
                            if i:FindFirstChild("Plr") then
                                for t, b in next, game:GetService("Workspace").Plots:GetChildren() do
                                    if b.Owner.Value == game.Players.LocalPlayer then
                                        i.Parent.CFrame = b.Base.CFrame + Vector3.new(0, 25, 0)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        )
    end
    checkF()
    local function checkH()
        local plr = game.Players.LocalPlayer
        local mouse = plr:GetMouse()
        mouse.KeyDown:Connect(
            function(key)
                if key == "h" then
                    for r, i in next, game:GetService("Workspace").Grabable:GetDescendants() do
                        if i.Name == "Grab" then
                            if i:FindFirstChild("Plr") then
                                v.Part.CFrame = CFrame.new(math.random(404, 436)*-1, 8, math.random(67,85)*-1)
                                task.wait(1)
                                workspace.Map.Sellary.Keeper.IPart.Interact:FireServer()
                                task.wait(1)
                                for i, v in pairs(
                                    getconnections(
                                        game:GetService("Players").LocalPlayer.PlayerGui.UserGui.Dialog:WaitForChild("Yes").MouseButton1Click
                                    )
                                ) do
                                    v:Fire()
                                end
                            end
                        end
                    end
                end
            end
		)
	end

    local notS, notR, notI = false, false, false
    local function getTrusty()
        -- pre check if all 3 pickaxes are existing
        for i, v in next, game:GetService("Workspace").Grabable:GetChildren() do
            if v.Name == "Boxed Stone Pickaxe" then
                notS = true
            elseif v.Name == "Boxed Rusty Pickaxe" then
                notR = true
            elseif v.Name == "Boxed Iron Pickaxe" then
                notI = true
            end
        end
        if not notS or not notR or not notI then
            DiscordLib:Notification("Notification", "Pickaxes Haven't Regenerated yet!", "Okay!")
            return
        end
        for i,v in next, game:GetService("Workspace").Grabable:GetChildren() do
            if ((v.Name == "Boxed Stone Pickaxe" and notS) or (v.Name == "Boxed Rusty Pickaxe" and notR) or (v.Name == "Boxed Iron Pickaxe" and notI)) and v:FindFirstChild("Part") then
                if not (v.Part.Position.X < 143+10 and v.Part.Position.X > 143-10 and v.Part.Position.Z < 1105+10 and v.Part.Position.Z > 1105-10) and v.Part.Position.Y > 1 then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Part.CFrame
                    game:GetService("ReplicatedStorage").Events.Grab:InvokeServer(v.Part,{})
                    task.wait(0.1)
                    v:FindFirstChild("Part").CFrame = CFrame.new(143, 83, 1105)
                    task.wait(1.5)
                end
            end
        end
    end


    main:Button(
        "Give Trusty Pickaxe",
        function ()
            local t = 0
            while t<15 do
                task.spawn(getTrusty)
                task.wait(0.2)
                t = t + 1
            end
            DiscordLib:Notification("Notification", "Spawned Trusty Pickaxe!", "Okay!")
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(135, 88, 1088)
        end
    )
        -- checks if a player presses the F key
        local function checkF()
            local plr = game.Players.LocalPlayer
            local mouse = plr:GetMouse()
            mouse.KeyDown:Connect(
                function(key)
                    if key == "f" then
                        for r, i in next, game:GetService("Workspace").Grabable:GetDescendants() do
                            if i.Name == "Grab" then
                                if i:FindFirstChild("Plr") then
                                    for t, b in next, game:GetService("Workspace").Plots:GetChildren() do
                                        if b.Owner.Value == game.Players.LocalPlayer then
                                            i.Parent.CFrame = b.Base.CFrame + Vector3.new(0, 25, 0)
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            )
        end
        checkF()
        local function checkH()
            local plr = game.Players.LocalPlayer
            local mouse = plr:GetMouse()
            mouse.KeyDown:Connect(
                function(key)
                    if key == "h" then
                        for r, i in next, game:GetService("Workspace").Grabable:GetDescendants() do
                            if i.Name == "Grab" then
                                if i:FindFirstChild("Plr") then
                                    v.Part.CFrame = CFrame.new(math.random(404, 436)*-1, 8, math.random(67,85)*-1)
                                    task.wait(1)
                                    workspace.Map.Sellary.Keeper.IPart.Interact:FireServer()
                                    task.wait(1)
                                    for i, v in pairs(
                                        getconnections(
                                            game:GetService("Players").LocalPlayer.PlayerGui.UserGui.Dialog:WaitForChild("Yes").MouseButton1Click
                                        )
                                    ) do
                                        v:Fire()
                                    end
                                end
                            end
                        end
                    end
                end
            )
        end
        checkH()
    main:Label("Hotkeys")
    main:Label("F - Teleport ores to plot")
    main:Label("H - Teleport ores to sell")    
    -- misc --
     misc:Button(
        "No Damage",
        function()
            local events = {
                Fire = true,
                Invoke = true,
                FireServer = true,
                InvokeServer = true
            }

            local gmeta = getrawmetatable(game)
            setreadonly(gmeta, false)
            local psuedoEnv = {
                ["__index"] = gmeta.__index,
                ["__namecall"] = gmeta.__namecall
            }
            gmeta.__index, gmeta.__namecall =
            newcclosure(
                function(self, index, ...)
                    if events[index] then
                        if "DamageMe" == self.Name and not checkcaller() then
                            return nil
                        end
                    end
                    return psuedoEnv.__index(self, index, ...)
                end
            )
            setreadonly(gmeta, true)
        end
    )
    misc:Button(
        "No Blur",
        function()
            game:GetService("Lighting").WaterBlur:Destroy()
            game:GetService("Lighting").Blur:Destroy()
            DiscordLib:Notification("No Blur", "No Blur has been enabled", "Okay")
        end
    )
    misc:Toggle(
        "No Shadows",
        false,
        function(t)
            if t then 
                DiscordLib:Notification("No Shadows", "No Shadows has been enabled", "Okay")
            else
                DiscordLib:Notification("No Shadows", "No Shadows has been disabled", "Okay")
            end
            game:GetService("Lighting").Shadows = t
        end
    )
    -- places a light on the players head
    misc:Toggle(
        "Head Light",
        false,
        function(t)
            if t then
                local light = Instance.new("PointLight")
                light.Parent = game.Players.LocalPlayer.Character.Head
                light.Range = 100
                light.Brightness = 1
                light.Color = Color3.fromRGB(255, 255, 255)
                DiscordLib:Notification("Head Light", "Head Light has been enabled", "Okay")
            else
                game.Players.LocalPlayer.Character.Head.PointLight:Destroy()
                DiscordLib:Notification("Head Light", "Head Light has been disabled", "Okay")
            end
        end
    )
     misc:Toggle("Show Full Money", true, function(t)
        if t then
            mts = true
            DiscordLib:Notification("Show Full Money", "Showing full money has been enabled", "Okay")
        else
            mts = false
            DiscordLib:Notification("Show Full Money", "Showing full money has been disabled", "Okay")
        end
    end)
	 -- changelog
    local changelog = serv:Channel("Changelog")
    local change = {
        "Update 1.0.0 - 11/01/2022",
        "- Initial Release",
		"- Fixed Anti Cheat",
	"",
	"Update 1.0.1 - 11/02/2022",
	"Added Misc tab"
    }
    for i,v in pairs(change) do
        changelog:Label(v)
    end
